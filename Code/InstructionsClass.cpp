//
//  InstructionsClass.cpp
//  ClassificationTool
//
//  Created by Avraam Tapinos
//  Copyright Â© 2018 Avraam Tapinos. All rights reserved.
//

#include "InstructionsClass.hpp"
InstructionsClass::InstructionsClass(int i){
    if(i != 0){
        std::cout << "> Wrong Parameters were Provided.\n";
        std::cout << "> Change parameters and resubmit job.\n";
    }
    std::cout << "> Usage:\n";
    std::cout << "> Parameters:\n";
    std::cout << "> -fa         [./Reference reads directory in fasta format]\n";
    std::cout << "                 Required parameter if no index file is provided.\n\n";
    std::cout << "> -vpt_load   [./Index file generated by the CBN software]\n";
    std::cout << "                 Required parameter if no references fasta file is provided.\n\n";
    std::cout << "> -r          [./Short reads directory in fasta or fastq format]\n";
    std::cout << "                  Required parameter.\n\n";
    std::cout << "> -o          [Directory to save classification results]\n";
    std::cout << "                  Optional parameter.\n";
    std::cout << "                  If a directory is not provided results will be stored in the same directory as the short reads file.\n\n";
    std::cout << "> -kmer       [Integer value indicating the kmer size to be used to build the tree]\n";
    std::cout << "                  Optional parameter. (Default value: 64)\n\n";
    std::cout << "> -rep        [String value indicating the representation method to be used to build the tree]\n";
    std::cout << "                  Optional parameter. (Default value: Tetrahedron)\n";
    std::cout << "                  Options:\n";
    std::cout << "                          Atomic_Numbers\n";
    std::cout << "                          Complex_Numbers\n";
    std::cout << "                          Dna_Walk\n";
    std::cout << "                          EIIP_numbers\n";
    std::cout << "                          Integer_numbers\n";
    std::cout << "                          Pair_numbers\n";
    std::cout << "                          Real_numbers\n";
    std::cout << "                          Tetrahedron\n";
    std::cout << "                          Voss_indicators\n";
    std::cout << "                         Z_curve\n\n";
    std::cout << "> -tra        [String value indicating the transformation method to be used to build the tree]\n";
    std::cout << "                  Optional parameter. (Default value: DWT)\n";
    std::cout << "                  Options:\n";
    std::cout << "                          DFT\n";
    std::cout << "                          DWT\n";
    std::cout << "                          PAA\n\n";
    std::cout << "> -clvl       [Integer value indicating the data compression levelt o be used to build the tree]\n";
    std::cout << "                  Optional parameter. (Default value: 4)\n";
    std::cout << "> -KNN        [Integer value indicating the number of K nearest neighbours to report]\n";
    std::cout << "                  Optional parameter. (Default value: 5)\n";
    std::cout << "> -ra         [Double value indicating the length to be used for the range search]\n";
    std::cout << "                  Optional parameter. (Default value: 0.5)\n";
    std::cout << "> -sen        [String value indicating the search strategy to be used for the KNN search.]\n";
    std::cout << "                  If sen is set to yes a more sensitive but slowr KNN search is performed wheres if\n";
    std::cout << "                  sen is set to no a more faster but not as sensitive KNN search is performed \n";
    std::cout << "                  Optional parameter. (Default value: No)\n";
    std::cout << "                          y or Y or Yes\n";
    std::cout << "                          n or N or No\n\n";
    std::cout << "> -evs        [String value indicating the speed of  the evalaution speed of the knn results]\n";
    std::cout << "                  Optional parameter. (Default value: M)\n";
    std::cout << "                  Options:\n";
    std::cout << "                          F or Fast   [Less accurate]\n";
    std::cout << "                          M or Medium [Accurate]\n";
    std::cout << "                          S or Slow   [The most rigorous] \n\n";
    std::cout << "> -proc       [String value indicating if a preprocess should be performed]\n";
    std::cout << "                  Optional parameter. (Default value: No)\n";
    std::cout << "                  Options:\n";
    std::cout << "                          y or Y or Yes\n";
    std::cout << "                          n or N or No\n\n";
    std::cout << "> -s          [String value indicating if the tree needs to be stored on hard drivet]\n";
    std::cout << "                  Optional parameter. (Default value: No)\n";
    std::cout << "                  Options:\n";
    std::cout << "                          y or Y or Yes\n";
    std::cout << "                          n or N or No\n\n";
    std::cout << "> -vpt_save   [./directory to save index file]\n";
    std::cout << "                  Optional parameter.\n";
    std::cout << "                  If a directory not provided results will be stored in the same directory as the Reference reads file.\n";
    std::cout << "                  If an index structure is provided for the search, the tree will not be saved.\n\n";
    std::cout << "> -accu       [String value indicating if a representations accumulated sum should be performed]\n";
    std::cout << "                  Optional parameter. (Default value: No)\n";
    std::cout << "                  Options:\n";
    std::cout << "                          y or Y or Yes\n";
    std::cout << "                          n or N or No\n\n";
    std::cout << "> -znorm      [String value indicating if a representations Z-normalisation should be performed]\n";
    std::cout << "                  Optional parameter. (Default value: No)\n";
    std::cout << "                  Options:\n";
    std::cout << "                          y or Y or Yes\n";
    std::cout << "                          n or N or No\n\n";
    std::cout << "> -ptd        [String value indicating if tree details should be printed]\n";
    std::cout << "                  Optional parameter. (Default value: No)\n";
    std::cout << "                  Options:\n";
    std::cout << "                          y or Y or Yes\n";
    std::cout << "                          n or N or No\n\n";
    std::cout << "> -repall     [String value indicating if details for all reads (including unmatched reads) should be saved or only matched reads details should be saved \n";
    std::cout << "                  Optional parameter. (Default value: Yes)\n";
    std::cout << "                  Options:\n";
    std::cout << "                          y or Y or Yes\n";
    std::cout << "                          n or N or No\n\n";
    std::cout << "> -h or -help              Print the instructions manual.\n";
    
    std::cout << "Examples:\n";
    std::cout << "ClassificationByNumbers -fa ./References.fasta -r ./ShortReads.fastq -o ./OutputDirectory\n";
    std::cout << "ClassificationByNumbers -vpt_load ./References.vptstruct -r ./ShortReads.fastq -o ./OutputDirectory\n";
    std::cout << "ClassificationByNumbers -fa ./References.fasta -r ./ShortReads.fastq -o ./OutputDirectory -kmer 32 -rep Voss_indicators -tra PAA -clvl 8 -KNN 10 -speed F -proc Y -s Y -vpt_save ./Save_IndexDirectory/ -repall Yes \n";
    std::cout << "ClassificationByNumbers -fa ./References.fasta -r ./ShortReads.fastq -o ./OutputDirectory -kmer 32 -rep Voss_indicators -tra PAA -clvl 8 -ra 0.25 -speed F -proc Y -s Y -vpt_save ./Save_IndexDirectory/ -repall No\n";
    
    std::cout << "ClassificationByNumbers -vpt_load ./References.vptstruct -r ./ShortReads.fastq -o ./OutputDirectory -kmer 32 -rep Voss_indicators -tra PAA -clvl 8 -KNN 10 -speed F -proc Y -repall Yes\n";
    std::cout << "ClassificationByNumbers -vpt_load ./References.vptstruct -r ./ShortReads.fastq -o ./OutputDirectory -kmer 32 -rep Voss_indicators -tra PAA -clvl 8 -ra 0.25 -speed F -proc Y -repall No\n";
    
    
    
    
    
};
